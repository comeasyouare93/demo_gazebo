// Generated by gencpp from file dlite_simulator/SensorDataRequest.msg
// DO NOT EDIT!


#ifndef DLITE_SIMULATOR_MESSAGE_SENSORDATAREQUEST_H
#define DLITE_SIMULATOR_MESSAGE_SENSORDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dlite_simulator/Cell.h>

namespace dlite_simulator
{
template <class ContainerAllocator>
struct SensorDataRequest_
{
  typedef SensorDataRequest_<ContainerAllocator> Type;

  SensorDataRequest_()
    : p()  {
    }
  SensorDataRequest_(const ContainerAllocator& _alloc)
    : p(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dlite_simulator::Cell_<ContainerAllocator>  _p_type;
  _p_type p;





  typedef boost::shared_ptr< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SensorDataRequest_

typedef ::dlite_simulator::SensorDataRequest_<std::allocator<void> > SensorDataRequest;

typedef boost::shared_ptr< ::dlite_simulator::SensorDataRequest > SensorDataRequestPtr;
typedef boost::shared_ptr< ::dlite_simulator::SensorDataRequest const> SensorDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dlite_simulator::SensorDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dlite_simulator::SensorDataRequest_<ContainerAllocator1> & lhs, const ::dlite_simulator::SensorDataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.p == rhs.p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dlite_simulator::SensorDataRequest_<ContainerAllocator1> & lhs, const ::dlite_simulator::SensorDataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dlite_simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7cb4f7a9b6a6ff2c7595798bb991bf3";
  }

  static const char* value(const ::dlite_simulator::SensorDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7cb4f7a9b6a6ff2ULL;
  static const uint64_t static_value2 = 0xc7595798bb991bf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dlite_simulator/SensorDataRequest";
  }

  static const char* value(const ::dlite_simulator::SensorDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Cell p\n"
"\n"
"================================================================================\n"
"MSG: dlite_simulator/Cell\n"
"int32 x\n"
"int32 y \n"
;
  }

  static const char* value(const ::dlite_simulator::SensorDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dlite_simulator::SensorDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dlite_simulator::SensorDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    s << std::endl;
    Printer< ::dlite_simulator::Cell_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DLITE_SIMULATOR_MESSAGE_SENSORDATAREQUEST_H
