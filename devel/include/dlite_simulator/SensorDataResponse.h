// Generated by gencpp from file dlite_simulator/SensorDataResponse.msg
// DO NOT EDIT!


#ifndef DLITE_SIMULATOR_MESSAGE_SENSORDATARESPONSE_H
#define DLITE_SIMULATOR_MESSAGE_SENSORDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dlite_simulator/Cell.h>
#include <dlite_simulator/Cell.h>

namespace dlite_simulator
{
template <class ContainerAllocator>
struct SensorDataResponse_
{
  typedef SensorDataResponse_<ContainerAllocator> Type;

  SensorDataResponse_()
    : black()
    , white()  {
    }
  SensorDataResponse_(const ContainerAllocator& _alloc)
    : black(_alloc)
    , white(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dlite_simulator::Cell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dlite_simulator::Cell_<ContainerAllocator> >::other >  _black_type;
  _black_type black;

   typedef std::vector< ::dlite_simulator::Cell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dlite_simulator::Cell_<ContainerAllocator> >::other >  _white_type;
  _white_type white;





  typedef boost::shared_ptr< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SensorDataResponse_

typedef ::dlite_simulator::SensorDataResponse_<std::allocator<void> > SensorDataResponse;

typedef boost::shared_ptr< ::dlite_simulator::SensorDataResponse > SensorDataResponsePtr;
typedef boost::shared_ptr< ::dlite_simulator::SensorDataResponse const> SensorDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dlite_simulator::SensorDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dlite_simulator::SensorDataResponse_<ContainerAllocator1> & lhs, const ::dlite_simulator::SensorDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.black == rhs.black &&
    lhs.white == rhs.white;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dlite_simulator::SensorDataResponse_<ContainerAllocator1> & lhs, const ::dlite_simulator::SensorDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dlite_simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db43212560cf105b8c0fd53f481bcd37";
  }

  static const char* value(const ::dlite_simulator::SensorDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb43212560cf105bULL;
  static const uint64_t static_value2 = 0x8c0fd53f481bcd37ULL;
};

template<class ContainerAllocator>
struct DataType< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dlite_simulator/SensorDataResponse";
  }

  static const char* value(const ::dlite_simulator::SensorDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Cell[] black\n"
"Cell[] white\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dlite_simulator/Cell\n"
"int32 x\n"
"int32 y \n"
;
  }

  static const char* value(const ::dlite_simulator::SensorDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.black);
      stream.next(m.white);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dlite_simulator::SensorDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dlite_simulator::SensorDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "black[]" << std::endl;
    for (size_t i = 0; i < v.black.size(); ++i)
    {
      s << indent << "  black[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dlite_simulator::Cell_<ContainerAllocator> >::stream(s, indent + "    ", v.black[i]);
    }
    s << indent << "white[]" << std::endl;
    for (size_t i = 0; i < v.white.size(); ++i)
    {
      s << indent << "  white[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dlite_simulator::Cell_<ContainerAllocator> >::stream(s, indent + "    ", v.white[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DLITE_SIMULATOR_MESSAGE_SENSORDATARESPONSE_H
